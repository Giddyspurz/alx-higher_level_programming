The ```3-say_my_name module```
=============================

using ``say_my_name``
--------------------

First import method from the module
    >>> say_my_name = __import__("3-say_my_name").say_my_name

Success case:

Test for module docstring:
    >>> m = __import__("3-say_my_name").__doc__
    >>> len(m) > 1
    True

Test for function docstring:
    >>> m = __import__("3-say_my_name").say_my_name.__doc__  
    >>> len(m) > 1
    True

Test for string:
    >>> say_my_name("John", "Smith")
    My name is John Smith
    >>> say_my_name("Bob")
    My name is Bob 
  
Falied case:

Test for non string data type:
    >>> say_my_name(2, "Jhon")  
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string
    >>> say_my_name("Jhon", 2.0)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string
    >>> say_my_name("Jhon", [])  
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string
    >>> say_my_name({"Klark"}, []) 
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Test for no argumnet:
    >>> say_my_name(None)  
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string
    >>> say_my_name(None, None)  
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Test for extra argument:
    >>> say_my_name("Jhon", "Smith", "white")
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

Test for too few argumnet:
    >>> say_my_name()                        
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
