The ```4-print_quare module```
============================

using ``print_quare``

First import method from the module
    >>> print_square = __import__("4-print_square").print_square

Success case:

Test for module docstring:
    >>> m = __import__("4-print_square").__doc__
    >>> len(m) > 1
    True

Test for function docstring:
    >>> m = __import__("4-print_square").print_square.__doc__ 
    >>> len(m) > 1
    True

Test for any integer:
    >>> print_square(4)
    ####
    ####
    ####
    ####
    >>> print_square(10) 
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Test for zero:
    >>> print_square(0)  
    <BLANKLINE>
    >>> print_square(1)   
    #

Failed case:

Test for wrong data type:
    >>> print_square(-1)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0
    >>> print_square(4.5)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square("3")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square(True)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square([])
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test for extra argument:
    >>> print_square(4, 5) 
    Traceback (most recent call last):
    ...
    TypeError: print_square() takes 1 positional argument but 2 were given

Test for too few argumnet:
    >>> print_square()    
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'

Test for passing None:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
